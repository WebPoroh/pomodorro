# test_sync.py
import asyncio
import aiohttp
import time
import json

async def test_timer_sync():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞...")
    
    async with aiohttp.ClientSession() as session:
        # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print("1. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        async with session.get("http://localhost:8000/api/timer/") as response:
            if response.status == 200:
                initial_state = await response.json()
                print(f"   –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {initial_state}")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                return False
        
        # 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
        print("2. –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞...")
        async with session.post("http://localhost:8000/api/timer/start/") as response:
            if response.status == 200:
                print("   ‚úÖ –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞")
                return False
        
        # 3. –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
        print("3. –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...")
        await asyncio.sleep(3)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è...")
        async with session.get("http://localhost:8000/api/timer/") as response:
            if response.status == 200:
                current_state = await response.json()
                print(f"   –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è —É–º–µ–Ω—å—à–∏–ª–æ—Å—å
                if current_state["time_left"] < initial_state["time_left"]:
                    print("   ‚úÖ –í—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å")
                else:
                    print("   ‚ùå –í—Ä–µ–º—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")
                    return False
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                return False
        
        # 5. –ü–∞—É–∑–∞ —Ç–∞–π–º–µ—Ä–∞
        print("5. –ü–∞—É–∑–∞ —Ç–∞–π–º–µ—Ä–∞...")
        async with session.post("http://localhost:8000/api/timer/pause/") as response:
            if response.status == 200:
                print("   ‚úÖ –¢–∞–π–º–µ—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã —Ç–∞–π–º–µ—Ä–∞")
                return False
        
        # 6. –ñ–¥–µ–º –µ—â–µ —Å–µ–∫—É–Ω–¥—É
        print("6. –û–∂–∏–¥–∞–Ω–∏–µ 1 —Å–µ–∫—É–Ω–¥–∞...")
        await asyncio.sleep(1)
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        print("7. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ –ø–∞—É–∑–µ...")
        async with session.get("http://localhost:8000/api/timer/") as response:
            if response.status == 200:
                paused_state = await response.json()
                print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø–∞—É–∑–µ: {paused_state}")
                
                if paused_state["time_left"] == current_state["time_left"]:
                    print("   ‚úÖ –í—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ –Ω–∞ –ø–∞—É–∑–µ")
                else:
                    print("   ‚ùå –í—Ä–µ–º—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ –ø–∞—É–∑–µ")
                    return False
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                return False
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True

async def test_multiple_clients():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞
    async with aiohttp.ClientSession() as client1, aiohttp.ClientSession() as client2:
        # –ö–ª–∏–µ–Ω—Ç 1 –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä
        print("–ö–ª–∏–µ–Ω—Ç 1: –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞...")
        async with client1.post("http://localhost:8000/api/timer/start/") as response:
            if response.status != 200:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞")
                return False
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await asyncio.sleep(2)
        
        # –ö–ª–∏–µ–Ω—Ç 2 –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print("–ö–ª–∏–µ–Ω—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        async with client2.get("http://localhost:8000/api/timer/") as response:
            if response.status == 200:
                state = await response.json()
                print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
                if state["is_running"]:
                    print("   ‚úÖ –ö–ª–∏–µ–Ω—Ç 2 –≤–∏–¥–∏—Ç, —á—Ç–æ —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω")
                else:
                    print("   ‚ùå –ö–ª–∏–µ–Ω—Ç 2 –Ω–µ –≤–∏–¥–∏—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä")
                    return False
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                return False
        
        # –ö–ª–∏–µ–Ω—Ç 2 —Å—Ç–∞–≤–∏—Ç –Ω–∞ –ø–∞—É–∑—É
        print("–ö–ª–∏–µ–Ω—Ç 2: –ü–∞—É–∑–∞ —Ç–∞–π–º–µ—Ä–∞...")
        async with client2.post("http://localhost:8000/api/timer/pause/") as response:
            if response.status != 200:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—É–∑—ã —Ç–∞–π–º–µ—Ä–∞")
                return False
        
        # –ö–ª–∏–µ–Ω—Ç 1 –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ
        print("–ö–ª–∏–µ–Ω—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—É–∑—ã...")
        async with client1.get("http://localhost:8000/api/timer/") as response:
            if response.status == 200:
                state = await response.json()
                if not state["is_running"]:
                    print("   ‚úÖ –ö–ª–∏–µ–Ω—Ç 1 –≤–∏–¥–∏—Ç, —á—Ç–æ —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–∞—É–∑–µ")
                else:
                    print("   ‚ùå –ö–ª–∏–µ–Ω—Ç 1 –Ω–µ –≤–∏–¥–∏—Ç –ø–∞—É–∑—É")
                    return False
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                return False
        
        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True

async def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Pomodoro Timer")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        sync_ok = await test_timer_sync()
        
        if sync_ok:
            # –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
            multi_ok = await test_multiple_clients()
            
            if multi_ok:
                print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
                print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
                print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: python main.py")
                print("2. –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000")
                print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python desktop_app.py")
                print("4. –¢–∞–π–º–µ—Ä –±—É–¥–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏!")
            else:
                print("\n‚ùå –¢–µ—Å—Ç—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        else:
            print("\n‚ùå –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–ª–∏")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python main.py")

if __name__ == "__main__":
    asyncio.run(main())
